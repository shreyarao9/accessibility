{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7952c99a-db44-4795-b0ac-3e4a86365215",
   "metadata": {},
   "outputs": [],
   "source": [
    "import nltk\n",
    "from nltk.corpus import stopwords\n",
    "from nltk.tokenize import word_tokenize, sent_tokenize\n",
    "from string import punctuation\n",
    "\n",
    "# Download NLTK data files (if not already done)\n",
    "nltk.download('punkt')\n",
    "nltk.download('stopwords')\n",
    "\n",
    "def summarize_text(text, n=3):\n",
    "    \"\"\"\n",
    "    Summarize the given text by extracting the top n important sentences.\n",
    "\n",
    "    Args:\n",
    "        text (str): The text to summarize.\n",
    "        n (int): The number of sentences to extract (default is 3).\n",
    "\n",
    "    Returns:\n",
    "        str: The summarized text.\n",
    "    \"\"\"\n",
    "    # Tokenize the text into sentences\n",
    "    sentences = sent_tokenize(text)\n",
    "\n",
    "    # Tokenize the text into words and filter out stopwords and punctuation\n",
    "    stop_words = set(stopwords.words(\"english\") + list(punctuation))\n",
    "    word_frequencies = {}\n",
    "\n",
    "    for word in word_tokenize(text.lower()):\n",
    "        if word not in stop_words:\n",
    "            if word in word_frequencies:\n",
    "                word_frequencies[word] += 1\n",
    "            else:\n",
    "                word_frequencies[word] = 1\n",
    "\n",
    "    # Calculate the maximum word frequency\n",
    "    max_frequency = max(word_frequencies.values())\n",
    "\n",
    "    # Normalize the word frequencies by dividing by the maximum frequency\n",
    "    for word in word_frequencies.keys():\n",
    "        word_frequencies[word] /= max_frequency\n",
    "\n",
    "    # Score each sentence based on the normalized word frequencies\n",
    "    sentence_scores = {}\n",
    "    for sentence in sentences:\n",
    "        for word in word_tokenize(sentence.lower()):\n",
    "            if word in word_frequencies:\n",
    "                if sentence not in sentence_scores:\n",
    "                    sentence_scores[sentence] = word_frequencies[word]\n",
    "                else:\n",
    "                    sentence_scores[sentence] += word_frequencies[word]\n",
    "\n",
    "    # Sort the sentences by their scores and select the top n sentences\n",
    "    summarized_sentences = sorted(sentence_scores, key=sentence_scores.get, reverse=True)[:n]\n",
    "\n",
    "    # Join the selected sentences to form the summary\n",
    "    summary = ' '.join(summarized_sentences)\n",
    "    return summary\n",
    "\n",
    "# Dynamic text input from the user\n",
    "text = input(\"Enter the text to summarize:\\n\")\n",
    "\n",
    "# Dynamic number of sentences for the summary\n",
    "try:\n",
    "    n = int(input(\"Enter the number of sentences for the summary (default is 3):\\n\"))\n",
    "except ValueError:\n",
    "    n = 3  # Default value if invalid input\n",
    "\n",
    "# Generate and display the summary\n",
    "summary = summarize_text(text, n)\n",
    "print(\"\\nSummary:\")\n",
    "print(summary)\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
