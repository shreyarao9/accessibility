{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "70c375af-e90a-4cf7-8356-d1ade9d70e6b",
   "metadata": {},
   "outputs": [],
   "source": [
    "import nltk\n",
    "from nltk.tokenize import sent_tokenize, word_tokenize\n",
    "from nltk.corpus import stopwords\n",
    "from nltk import pos_tag\n",
    "import random\n",
    "\n",
    "# Download NLTK data files (if not already done)\n",
    "nltk.download('punkt')\n",
    "nltk.download('averaged_perceptron_tagger')\n",
    "nltk.download('stopwords')\n",
    "\n",
    "def generate_mcq_quiz(text, num_questions=3, num_choices=4):\n",
    "    \"\"\"\n",
    "    Generate an MCQ quiz from the given text.\n",
    "\n",
    "    Args:\n",
    "        text (str): The text to create the quiz from.\n",
    "        num_questions (int): The number of quiz questions to generate (default is 3).\n",
    "        num_choices (int): The number of choices for each question (default is 4).\n",
    "\n",
    "    Returns:\n",
    "        list: A list of dictionaries, each containing the question, options, and the correct answer.\n",
    "    \"\"\"\n",
    "    # Tokenize the text into sentences\n",
    "    sentences = sent_tokenize(text)\n",
    "\n",
    "    # Tokenize each sentence into words and tag parts of speech\n",
    "    quiz = []\n",
    "    stop_words = set(stopwords.words('english'))\n",
    "\n",
    "    # Extract all nouns from the text to use as possible distractors\n",
    "    all_words = word_tokenize(text)\n",
    "    all_nouns = [word for word, pos in pos_tag(all_words) if pos in ('NN', 'NNS', 'NNP', 'NNPS') and word.lower() not in stop_words]\n",
    "\n",
    "    # Loop until we get the desired number of questions\n",
    "    while len(quiz) < num_questions:\n",
    "        # Randomly select a sentence\n",
    "        sentence = random.choice(sentences)\n",
    "        words = word_tokenize(sentence)\n",
    "        pos_tags = pos_tag(words)\n",
    "\n",
    "        # Filter out stopwords and select a word with a specific part of speech\n",
    "        candidates = [word for word, pos in pos_tags if pos in ('NN', 'NNS', 'NNP', 'NNPS') and word.lower() not in stop_words]\n",
    "\n",
    "        # If there are valid candidates, create an MCQ question\n",
    "        if candidates:\n",
    "            answer = random.choice(candidates)\n",
    "\n",
    "            # Create the question by replacing the answer with a blank\n",
    "            question = sentence.replace(answer, '______', 1)\n",
    "\n",
    "            # Generate distractors for the multiple-choice options\n",
    "            distractors = random.sample([noun for noun in all_nouns if noun != answer], num_choices - 1)\n",
    "            options = distractors + [answer]\n",
    "            random.shuffle(options)\n",
    "\n",
    "            # Add the question, options, and answer to the quiz\n",
    "            quiz.append({\n",
    "                'question': question,\n",
    "                'options': options,\n",
    "                'answer': answer\n",
    "            })\n",
    "\n",
    "    return quiz\n",
    "\n",
    "# Example usage\n",
    "text = \"\"\"\n",
    "Natural language processing (NLP) is a field of artificial intelligence that focuses on the interaction between computers and humans through natural language. \n",
    "The ultimate objective of NLP is to read, decipher, understand, and make sense of human languages in a manner that is valuable. \n",
    "Most NLP techniques rely on machine learning to derive meaning from human languages.\n",
    "Natural language processing is widely used for sentiment analysis, language translation, and text summarization.\n",
    "\"\"\"\n",
    "\n",
    "# Generate the MCQ quiz\n",
    "quiz = generate_mcq_quiz(text, num_questions=3)\n",
    "\n",
    "# Display the quiz questions\n",
    "print(\"MCQ Quiz:\")\n",
    "for idx, q in enumerate(quiz, 1):\n",
    "    print(f\"{idx}. {q['question']}\")\n",
    "    for i, option in enumerate(q['options']):\n",
    "        print(f\"   {chr(65+i)}. {option}\")\n",
    "    print(f\"Answer: {q['answer']}\\n\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
